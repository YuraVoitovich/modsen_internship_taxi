version: '1.0'
services:
  database:
    image: postgis/postgis:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "postgres"
    volumes:
      - ./init-database:/docker-entrypoint-initdb.d
      - postgres:/var/lib/postgresql/data
    networks:
      backend:
        aliases:
          - "database"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - 2181:2181
    networks:
      backend:
        aliases:
          - "zookeeper"
  kafkaserver:
    image: wurstmeister/kafka:latest
    ports:
      - 9092:9092
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_CREATE_TOPICS=dresses:1:1,ratings:1:1
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    depends_on:
      - zookeeper
    networks:
      backend:
        aliases:
          - "kafka"
  eurekaserver:
    image:
      discovery-service:latest
    ports:
      - "8761:8761"
    depends_on:
      database:
        condition: service_healthy
    networks:
      backend:
        aliases:
          - "eurekaserver"
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8079:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: 'false'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    volumes:
      - ~/kui/config.yml:/etc/kafkaui/dynamic_config.yaml
    networks:
      - backend

  prometheus:
    image: prom/prometheus:v2.47.0
    container_name: prometheus
    ports:
      - '9090:9090'
    volumes:
      - ./observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml

  grafana:
    image: grafana/grafana:10.1.5
    container_name: grafana
    ports:
      - '3000:3000'
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    volumes:
      - ./observability/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./observability/grafana/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
      - prometheus
  driverservice:
    image: driver-service:latest
    ports:
      - "8080:8080"
    environment:
      PROFILE: "dev"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - backend
  rideservice:
    image: ride-service:latest
    ports:
      - "8083:8083"
    environment:
      PROFILE: "dev"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - backend


  passengerservice:
    image: passenger-service:latest
    ports:
      - "8081:8081"
    environment:
      PROFILE: "dev"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - backend

networks:
  backend:
    driver: bridge
volumes:
  postgres: